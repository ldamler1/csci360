<HTML>

<HEAD>
<TITLE>CSCI 360 Assignment 3</TITLE>
</HEAD>

<BODY>

<CENTER>
<H2><B>
<P>Assignment 3
<P>100 points
</B></H2></CENTER>

<P><B>Overview</B>

<P>For this assignment, write a program that will produce a sales
   report for a company called Widgets-R-Us.  They are offering
   discounts and free shipping for sufficiently large orders.

<P><HR>

<P><B>Input</B>

<P>The input to the program will be a file with an unknown number of
   records.  Each record represents a single sale and has the following
   format:

<PRE>     Columns         Description
     -------         -----------
      1 - 6          Order ID
      7 - 8          spaces
      9 - 12         Number Ordered
     13 - 14         spaces         
     15 - 19         Price Each (in cents)
     20 - 21         spaces  
     22 - 29         Product ID
     30 - 80         spaces</PRE>

<p>Use the following JCL:

<pre>//KCnumberA JOB ,'Your Name',MSGCLASS=H
//STEP1    EXEC  PGM=ASSIST
//STEPLIB    DD  DSN=KC02293.ASSIST.LOADLIB,DISP=SHR
//SYSPRINT   DD  SYSOUT=*
//SYSIN      DD  *
************************************************************
*
*  Program:     ASSIGN3
*  Programmer:  Your Name
*
*  Register usage:
*
************************************************************
(Your program goes here.)
/*
//FT05F001   DD  DSN=KC02314.SUMMER18.CSCI360.HW3DATA,DISP=SHR
//FT06F001   DD SYSOUT=*
//</pre>

<P><HR>

<P><B>Processing Requirements</B>

<P>For this assignment, write a read loop that will process the input
   one record at a time.

<P>For each input record, print a detail line containing the input 
   values along with the Discount, Shipping and Total Cost (in cents).

<P>Use the following formulas for your calculations:

<PRE>     PreTotal = Price Each * Number Ordered

     If (PreTotal >= 25000)
       Then Discount = 500
       Else Discount = 0
     End If

     If (PreTotal >= 10000)
       Then Shipping = 0
       Else Shipping = 750
     End If

     Total Cost = PreTotal + Shipping - Discount</PRE>

<P>As you process records, count them and accumulate the Grand Total =
   sum of Total Cost for all sales.  Also count sales for which Shipping
   = 0.

<P>After processing all of the input records, print summary lines
   which tell us:
<UL>
 <LI>the number of sales 
 <LI>the number of sales with Shipping = 0
 <LI>the Grand Total
 <LI>the average Total Cost per Sale
</UL>

<P>The average Total Cost should be rounded to the nearest cent. One 
   possible way to do this is, after doing the division, calculate 2 
   times the remainder and compare that product with the divisor. 
   If 2 * the remainder is greater than or equal to the divisor, then 
   the quotient should be rounded up up by 1.
   
<P><HR>

<P><B>Other Requirements</B>

<OL>
  <LI><P>Use <code>TITLE 'Your Name, CSCI 360, Program 3'</code>.

  <LI><P>Use <code>M, D, MR, DR, LA, XREAD, XDECI, XDECO, XPRNT, L, ST, C, A,
         S, AR, SR, BC</code> and <code>BCR</code>, as appropriate.

  <LI><P>Use at least one literal in the program.

  <LI><P>You should use line documentation, documentation boxes,
      and you are welcome to use <code>EJECT</code>, and 
      <code>SPACE</code>.  You will be using various registers, and 
      you do need to make a list of how you are using them.

  <LI><P>Write this program incrementally.  This will make it much easier to
      debug.  Initially write the program so that it reads and processes
      one record. Once you know it does that correctly, implement the
      loop.  Once the loop is working correctly, add the code to count 
      the sales, count those with free Shipping, etc.

  <LI><P>You may find that you run short of registers if your try to use 
      them for all your variables.  You can use fullwords in memory
      for some purposes such as counters.  When you want to increment 
      the counter, load it into a register, add 1 and store it again.
      That register is not then tied up and can be used for other purposes.

  <LI><P>When you are debugging logic errors, don't be reluctant to
  use XDUMP instructions to display registers and/or memory. Once you
  get the program running, remove the XDUMPs from the run that is
  turned in for grading.

  <P>Feel free to test the program with your own data.  To do so,
     temporarily replace the JCL line that starts with "//FT05F001" by

<PRE>     //FT05F001 DD *
     your data goes here 
     /*</PRE>

  <P>Make sure that the run you submit for grading uses the
     file specified above.
</OL>

<P><HR>

<P><B>Other Notes</B>

<P>The page header for the report should start at the top of a new
   page. The column headers should be double spaced from the page
   header. The sales information lines should be double spaced. The
   summary lines should be triple spaced from the last sales record.
   Double-space between summary lines.

<P>Notice that we are printing amounts of money simply as numbers of 
   cents.  Later in the course, we will have ways to format numbers
   more precisely.

<P>You may need to put a label on a line now and then when you are not 
   yet sure what instruction should be on that line.  In that case,
   you can just use:

<PRE>     MYLABEL  DS   0H</PRE>

<P>The "DS 0H" part allocates zero halfwords on a halfword boundary.
   Instruction are always on a halfword boundary anyway, so this does 
   no harm and simply associates MYLABEL with an address.  The next
   line will be at the same LOC value.

<P>If you wish, you may use <U>register equates</U>.  These allow
   you to refer to register 3 as "R3" instead of just "3".  To use
   these, include lines such as

<PRE>     R0       EQU   0
     R1       EQU   1
              .
              .
              .
     R15      EQU   15</PRE>

<p>somewhere in your program file (such as at the end).  You can
   read about EQU in our textbook, section 2.11, or on one of the
   web pages.  One advantage of using the register equates is that
   you are reminded that a number representing a register does
   just that and does not have some other meaning.  You are not
   required to use the register equates.

</BODY>

</HTML>
